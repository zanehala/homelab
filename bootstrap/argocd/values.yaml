argo-cd:
  server:
    extraArgs:
      - --insecure
    config:
      params:
        server.insecure: true
      statusbadge.enabled: 'true'
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
      
      configManagementPlugins: |
        - name: argocd-vault-plugin-helm
          init:
            command: [sh, -c]
            args: ["helm dependency build"]
          generate:
            command: ["sh", "-c"]
            args: ["helm template $ARGOCD_APP_NAME . --install-crds | argocd-vault-plugin generate -"]
      
      resource.exclusions: |
        - apiGroups:
          - "*"
          kinds:
          - "PipelineRun"
          - "TaskRun"
          clusters:
          - "*"


      # TODO https://github.com/argoproj/argo-helm/pull/1070
      # resource.customizations.health.argoproj.io_ApplicationSet: |
      #   hs = {}
      #   if obj.status ~= nil then
      #     if obj.status.conditions ~= nil then
      #       for i, condition in pairs(obj.status.conditions) do
      #         if condition.type == "ErrorOccurred" and condition.status == "True" then
      #           hs.status = "Degraded"
      #           hs.message = condition.message
      #           return hs
      #         end
      #         if condition.type == "ResourcesUpToDate" and condition.status == "True" then
      #           hs.status = "Healthy"
      #           hs.message = condition.message
      #           return hs
      #         end
      #       end
      #     end
      #   end
      #   hs.status = "Progressing"
      #   hs.message = ""
      #   return hs
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/proxy-body-size: 0m
      hostname: &host argocd.zanelab.com
      extraTls:
        - secretName: argocd-tls-certificate
          hosts:
            - *host
    metrics: &metrics
      enabled: true
      serviceMonitor:
        enabled: true
  controller:
    metrics: *metrics
  repoServer:
    metrics: *metrics
  redis:
    metrics: *metrics
  dex:
    metrics: *metrics

  # Doesn't work atm but not enabled. See root/template/stack.yaml
  repoServer:
    serviceAccount:
      create: true
      automountServiceAccountToken: true
      name: argocd-repo-server

    volumeMounts:
    - name: custom-tools
      mountPath: /usr/local/bin/argocd-vault-plugin
      subPath: argocd-vault-plugin
    
    volumes:
    - name: custom-tools
      emptyDir: {}
    
    initContainers:
    - name: download-tools
      image: alpine:3.20
      command: [sh, -c]
      envFrom:
        - secretRef:
            name: vault-configuration

      # Don't forget to update this to whatever the stable release version is
      # Note the lack of the `v` prefix unlike the git tag
      env:
        - name: AVP_VERSION
          value: "1.10.0"
      args:
        - >-
          wget -O argocd-vault-plugin
          https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools